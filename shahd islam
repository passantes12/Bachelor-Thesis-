{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPS4vbbK+YX9QxVJTwQou/x",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/passantes12/Bachelor-Thesis-/blob/main/shahd%20islam\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import pandas as pd\n",
        "\n",
        "# Prompt the user to choose a file from their computer\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Get the filename of the uploaded file\n",
        "filename = list(uploaded.keys())[0]\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "id": "MlGjI1xvio9Z",
        "outputId": "b8c856a2-8084-46cf-c07c-8fcf1e70cafc"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-40819d55-e1c1-4234-966a-7d7abc5aa673\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-40819d55-e1c1-4234-966a-7d7abc5aa673\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving datasettt.xlsx to datasettt (3).xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read the uploaded CSV file into a DataFrame\n",
        "data = pd.read_excel(datasettt)\n"
      ],
      "metadata": {
        "id": "uowS5ey3un-8"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Define the data as a list of tuples\n",
        "data = [tuple(row) for row in df.values]\n",
        "\n",
        "# Print the first few tuples\n",
        "for tuple_data in data[:5]:\n",
        "    print(tuple_data)\n",
        "\n",
        "\n",
        "# Define column names\n",
        "columns = ['Invoice', 'StockCode', 'Description', 'Quantity',\n",
        "           'InvoiceDate', 'Price', 'Customer ID',\n",
        "           'Country']\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame(data, columns=columns)\n",
        "\n",
        "# Display the DataFrame\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y1LJXtFjvBTT",
        "outputId": "11d37c9a-9b6a-4332-ba0e-a9d038df5653"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(489434, 85048, '15CM CHRISTMAS GLASS BALL 20 LIGHTS', 12, Timestamp('2009-12-01 07:45:00'), 6.95, 13085.0, 'United Kingdom')\n",
            "(489434, '79323P', 'PINK CHERRY LIGHTS', 12, Timestamp('2009-12-01 07:45:00'), 6.75, 13085.0, 'United Kingdom')\n",
            "(489434, '79323W', ' WHITE CHERRY LIGHTS', 12, Timestamp('2009-12-01 07:45:00'), 6.75, 13085.0, 'United Kingdom')\n",
            "(489434, 22041, 'RECORD FRAME 7\" SINGLE SIZE ', 48, Timestamp('2009-12-01 07:45:00'), 2.1, 13085.0, 'United Kingdom')\n",
            "(489434, 21232, 'STRAWBERRY CERAMIC TRINKET BOX', 24, Timestamp('2009-12-01 07:45:00'), 1.25, 13085.0, 'United Kingdom')\n",
            "       Invoice StockCode                          Description  Quantity  \\\n",
            "0       489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n",
            "1       489434    79323P                   PINK CHERRY LIGHTS        12   \n",
            "2       489434    79323W                  WHITE CHERRY LIGHTS        12   \n",
            "3       489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n",
            "4       489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n",
            "...        ...       ...                                  ...       ...   \n",
            "525456  538171     22271                 FELTCRAFT DOLL ROSIE         2   \n",
            "525457  538171     22750         FELTCRAFT PRINCESS LOLA DOLL         1   \n",
            "525458  538171     22751       FELTCRAFT PRINCESS OLIVIA DOLL         1   \n",
            "525459  538171     20970   PINK FLORAL FELTCRAFT SHOULDER BAG         2   \n",
            "525460  538171     21931               JUMBO STORAGE BAG SUKI         2   \n",
            "\n",
            "               InvoiceDate  Price  Customer ID         Country  \n",
            "0      2009-12-01 07:45:00   6.95      13085.0  United Kingdom  \n",
            "1      2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n",
            "2      2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n",
            "3      2009-12-01 07:45:00   2.10      13085.0  United Kingdom  \n",
            "4      2009-12-01 07:45:00   1.25      13085.0  United Kingdom  \n",
            "...                    ...    ...          ...             ...  \n",
            "525456 2010-12-09 20:01:00   2.95      17530.0  United Kingdom  \n",
            "525457 2010-12-09 20:01:00   3.75      17530.0  United Kingdom  \n",
            "525458 2010-12-09 20:01:00   3.75      17530.0  United Kingdom  \n",
            "525459 2010-12-09 20:01:00   3.75      17530.0  United Kingdom  \n",
            "525460 2010-12-09 20:01:00   1.95      17530.0  United Kingdom  \n",
            "\n",
            "[525461 rows x 8 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Identify the target column\n",
        "target_column = ''"
      ],
      "metadata": {
        "id": "-8MPL9VVzPJP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}